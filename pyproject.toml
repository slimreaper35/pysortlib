[tool.poetry]
name = "pysortlib"
version = "0.3.0"
description = "Python Sorting Library"
license = "MIT"
authors = ["Michal Å oltis <msoltis@redhat.com>"]
readme = "README.md"
repository = "https://github.com/slimreaper35/pysortlib"
keywords = ["sorting", "algorithms", "data structures"]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Education",
]

[tool.poetry.dependencies]
python = "^3.11"

[tool.poetry.dev-dependencies]
black = "23.11.0"
hypothesis = "6.92.1"
mypy = "1.7.1"
pre-commit = "3.5.0"
pyproject-fmt = "1.5.3"
pytest = "7.4.3"
pytest-cov = "4.1.0"
pytest-rich = "0.1.1"
ruff = "0.1.8"
tox = "4.11.4"
tox-ini-fmt = "1.3.1"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = [
    "poetry-core",
]

[tool.mypy]
ignore_missing_imports = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
strict = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests/*"
disallow_untyped_decorators = false

[tool.ruff]
select = ["ALL"]
ignore = [
    "D100", # Missing docstring in public module
    "D203", # 1 blank line required before class docstring
    "D212", # Multi-line docstring summary should start at the first line
]

[tool.ruff.per-file-ignores]
"__init__.py" = [
    "F401", # {name} imported but unused
]
"tests/*" = [
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
    "S101",  # Use of assert detected
]
