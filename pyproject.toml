[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool.poetry]
name = "pysortlib"
version = "0.6.0"
description = "Python Sorting Library"
license = "MIT"
authors = ["Michal Å oltis <msoltis@redhat.com>"]
readme = "README.md"
repository = "https://github.com/slimreaper35/pysortlib"
keywords = ["sorting", "algorithms", "data structures"]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Education",
]

[tool.poetry.dependencies]
python = "^3.12"

[tool.poetry.dev-dependencies]
hypothesis = "*"
mypy = "*"
nox = "*"
pre-commit = "*"
pyproject-fmt = "*"
pytest = "*"
pytest-cov = "*"
pytest-rich = "*"
ruff = "*"

[tool.ruff]
lint.select = ["ALL"]
lint.ignore = [
  "D100", # Missing docstring in public module
  "D203", # 1 blank line required before class docstring
  "D212", # Multi-line docstring summary should start at the first line
]
lint.per-file-ignores."__init__.py" = [
  "F401", # {name} imported but unused
]
lint.per-file-ignores."tests/*" = [
  "D103",  # Missing docstring in public function
  "D104",  # Missing docstring in public package
  "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
  "S101",  # Use of assert detected
]

[tool.mypy]
ignore_missing_imports = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
strict = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["noxfile", "tests/*"]
disallow_untyped_decorators = false
